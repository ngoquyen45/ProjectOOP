# server.address=192.168.99.184
server.port=8443
server.ssl.key-store=classpath:cert.p12
server.ssl.key-store-password=Tinhvan123

server.ssl.keyStoreType=PKCS12
#server.ssl.key-alias=server-alias
security.require-ssl=true

######### APPLICATION CONFIGURATION #########
app.languages=vi,en

######### FRONTEND CONFIGURATION #########
# User will be redirect to this url by default if they access directly to backend
frontend.web-url=https://dms.techqila.com
# Only allowed cross-origin access from following Origins (comma separator, no spaces)
# Default is empty, mean only allow access from same domain
# If domain of web app differ from domain of backend, set this value to url of web app


frontend.allowed-origins=${frontend.web-url}

######### DATABASE CONFIGURATION #########
#spring.data.mongodb.uri=mongodb://username:password@mongo1.example.com:12345,mongo2.example.com:23456/databasename
spring.data.mongodb.host=mongo
spring.data.mongodb.port=27017
spring.data.mongodb.database=salesquick2
#spring.data.mongodb.username=
#spring.data.mongodb.password=

mongodb.client.connection-per-host=100
mongodb.client.threads-allowed-to-block-multiplier=7
#mongodb.client.connect-timeout=10000
#mongodb.client.socket-timeout=0
#mongodb.client.socket-keep-alive=false

##### REDIS EMBEDDED SERVER #######
# Start embedded Redis server or not
spring.redis.embedded.enable=false
# Specify config file for embedded Redis, IF this value is SET, OTHER embedded OPTIONS WILL BE SKIP
# Note: DO NOT configure 'logfile', other wise our application cannot start
spring.redis.embedded.config-file=
# Location to store data file for embedded Redis
# When using this option, make sure following directory already created and app have permission
spring.redis.embedded.working-dir=
# Max memory for embedded Redis
spring.redis.embedded.max-memory=1gb

##### REDIS CONNECTION #######
# Redis server host.
spring.redis.host=redis
# Redis server port.
spring.redis.port=6379
# Database index used by the connection factory.
spring.redis.database=0
# Login password of the redis server.
#spring.redis.password=
# Max number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.
spring.redis.pool.max-active=300
# Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.
spring.redis.pool.min-idle=10
# Max number of "idle" connections in the pool. Use a negative value to indicate an unlimited number of idle connections.
spring.redis.pool.max-idle=100
# Maximum amount of time (in milliseconds) a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.
spring.redis.pool.max-wait=-100
# Connection timeout in milliseconds.
spring.redis.timeout=0
# Name of Redis server.
#spring.redis.sentinel.master=
# Comma-separated list of host:port pairs.
#spring.redis.sentinel.nodes=

######### MESSAGE BROKER CONFIGURATION #########
# Create a simple-embedded broker or not. If set to true, application will skip all other broker config
stomp.embedded=true
stomp.host=localhost
stomp.port=61613

######### RECAPTCHA SERVICE CONFIGURATION #########
recaptcha.security.enable=true
recaptcha.security.strict-mode=false
recaptcha.security.login-processing-url=/account/login
recaptcha.security.login-fail-count=3
recaptcha.validation.site-key=6LcuuRETAAAAANZDWdujIIOgrzAvYbkKWpsn2cSh
recaptcha.validation.secret-key=6LcuuRETAAAAAPCpBYXdlabB6gCXiwvn1ov97ve1

######### OAUTH 2.0 CONFIGURATION #########
oauth2.realm=dmsplus/client
# Verifier key used to sign all download request
oauth2.signed-request-verifier-key=WVRNME5ab21JekkyT1RzbUl6TTBOVHVlWVE
# OAuth 2 client_id
oauth2.client-id=dmsplus
# OAuth 2 client_secret
oauth2.client-secret=secret
# List of grant_type: implicit,refresh_token,password,authorization_code,client_credentials
oauth2.grant-type=implicit,refresh_token,password
# Declare any scope you want, you can restrict access base on scope (comma separator, no spaces)
oauth2.scope=read
# Refresh token life time: 7 days
oauth2.refresh-token-validity=604800
# Access token life time: 30 mins
oauth2.access-token-validity=1800
# Only allow following redirect url (comma separator, no spaces)
oauth2.redirect-uri=${frontend.allowed-origins}

######## TOTP CONFIGURATION #########
totp.enable=true
# otpauth://totp/DMSPlus%20Demo?secret=INGEYSSEIVGVIS2UI5FEYRKPKNJUQS2WJNLESVJSJVFE4TSFK5LFGRSL&issuer=DMSPlus
totp.secret=INGEYSSEIVGVIS2UI5FEYRKPKNJUQS2WJNLESVJSJVFE4TSFK5LFGRSL
