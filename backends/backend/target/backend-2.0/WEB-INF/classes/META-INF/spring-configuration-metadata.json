{
  "groups": [
    {
      "name": "app",
      "type": "com.viettel.backend.config.root.AppProperties",
      "sourceType": "com.viettel.backend.config.root.AppProperties"
    },
    {
      "name": "frontend",
      "type": "com.viettel.backend.config.root.FrontendProperties",
      "sourceType": "com.viettel.backend.config.root.FrontendProperties"
    },
    {
      "name": "mongodb.client",
      "type": "com.viettel.backend.config.root.MongoClientProperties",
      "sourceType": "com.viettel.backend.config.root.MongoClientProperties"
    },
    {
      "name": "oauth2",
      "type": "com.viettel.backend.oauth2.core.OAuth2Properties",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "recaptcha",
      "type": "com.viettel.backend.config.security.captcha.RecaptchaProperties",
      "sourceType": "com.viettel.backend.config.security.captcha.RecaptchaProperties"
    },
    {
      "name": "spring.redis",
      "type": "com.viettel.backend.config.root.RedisEmbeddedProperties",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "spring.redis.embedded",
      "type": "com.viettel.backend.config.root.RedisEmbeddedProperties$Embedded",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties",
      "sourceMethod": "getEmbedded()"
    },
    {
      "name": "stomp",
      "type": "com.viettel.backend.config.web.StompProperties",
      "sourceType": "com.viettel.backend.config.web.StompProperties"
    },
    {
      "name": "totp",
      "type": "com.viettel.backend.config.security.TotpProperties",
      "sourceType": "com.viettel.backend.config.security.TotpProperties"
    }
  ],
  "properties": [
    {
      "name": "app.languages",
      "type": "java.util.List<java.lang.String>",
      "sourceType": "com.viettel.backend.config.root.AppProperties"
    },
    {
      "name": "frontend.allowed-origins",
      "type": "java.util.List<java.lang.String>",
      "description": "Only allowed cross-origin access from following Origins. Default is empty, mean only allow access from same domain. If domain of web app differ from domain of backend, set this value to url of web app",
      "sourceType": "com.viettel.backend.config.root.FrontendProperties"
    },
    {
      "name": "frontend.web-url",
      "type": "java.lang.String",
      "description": "Url of web-frontend. This will become default redirect URL",
      "sourceType": "com.viettel.backend.config.root.FrontendProperties"
    },
    {
      "name": "mongodb.client.connect-timeout",
      "type": "java.lang.Integer",
      "description": "The connection timeout.",
      "sourceType": "com.viettel.backend.config.root.MongoClientProperties",
      "defaultValue": "10000"
    },
    {
      "name": "mongodb.client.connection-per-host",
      "type": "java.lang.Integer",
      "description": "Maximum number of connections per host.",
      "sourceType": "com.viettel.backend.config.root.MongoClientProperties",
      "defaultValue": "100"
    },
    {
      "name": "mongodb.client.socket-keep-alive",
      "type": "java.lang.Boolean",
      "description": "Is socket keep alive enabled.",
      "sourceType": "com.viettel.backend.config.root.MongoClientProperties",
      "defaultValue": "false"
    },
    {
      "name": "mongodb.client.socket-timeout",
      "type": "java.lang.Integer",
      "description": "The socket timeout.",
      "sourceType": "com.viettel.backend.config.root.MongoClientProperties",
      "defaultValue": "0"
    },
    {
      "name": "mongodb.client.threads-allowed-to-block-multiplier",
      "type": "java.lang.Integer",
      "description": "Multiplier for number of threads allowed to block waiting for a connection.",
      "sourceType": "com.viettel.backend.config.root.MongoClientProperties",
      "defaultValue": "5"
    },
    {
      "name": "oauth2.access-token-validity",
      "type": "java.lang.Integer",
      "description": "Access token life time in seconds",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties",
      "defaultValue": 0
    },
    {
      "name": "oauth2.client-id",
      "type": "java.lang.String",
      "description": "OAuth 2 client_id",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "oauth2.client-secret",
      "type": "java.lang.String",
      "description": "OAuth 2 client_secret",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "oauth2.grant-type",
      "type": "java.util.List<java.lang.String>",
      "description": "List of allowed grant type: implicit,refresh_token,password,authorization_code,client_credentials",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "oauth2.realm",
      "type": "java.lang.String",
      "description": "A description for 'oauth2.realm'",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "oauth2.redirect-uri",
      "type": "java.util.List<java.lang.String>",
      "description": "Only allow following redirect urls",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "oauth2.refresh-token-validity",
      "type": "java.lang.Integer",
      "description": "Refresh token life time in seconds",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties",
      "defaultValue": 0
    },
    {
      "name": "oauth2.scope",
      "type": "java.util.List<java.lang.String>",
      "description": "Declare any scope you want, you can restrict access base on scope",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "oauth2.signed-request-verifier-key",
      "type": "java.lang.String",
      "description": "Verifier key used to sign all download request",
      "sourceType": "com.viettel.backend.oauth2.core.OAuth2Properties"
    },
    {
      "name": "recaptcha.security",
      "type": "com.github.mkopylec.recaptcha.RecaptchaProperties$Security",
      "description": "Properties responsible for integration with Spring Security.",
      "sourceType": "com.viettel.backend.config.security.captcha.RecaptchaProperties"
    },
    {
      "name": "recaptcha.security.enable",
      "type": "java.lang.Boolean",
      "description": "Enable or disable CAPTCHA feature"
    },
    {
      "name": "recaptcha.security.login-fail-count",
      "type": "java.lang.Integer",
      "description": "Max number of login fail, after that, user must have to resolve CAPTCHA. Only have effect if 'recaptcha.security.strictMode'='false'"
    },
    {
      "name": "recaptcha.security.strict-mode",
      "type": "java.lang.Boolean",
      "description": "If set to 'true', every time user login, they have to resolve the CAPTCHA. Other wise, CAPTCHA only show when they login fail several time."
    },
    {
      "name": "recaptcha.testing",
      "type": "com.github.mkopylec.recaptcha.RecaptchaProperties$Testing",
      "description": "Properties responsible for testing mode behaviour.",
      "sourceType": "com.viettel.backend.config.security.captcha.RecaptchaProperties"
    },
    {
      "name": "recaptcha.validation",
      "type": "com.github.mkopylec.recaptcha.RecaptchaProperties$Validation",
      "description": "Properties responsible for reCAPTCHA validation on Google's servers.",
      "sourceType": "com.viettel.backend.config.security.captcha.RecaptchaProperties"
    },
    {
      "name": "recaptcha.validation.secret-key",
      "type": "java.lang.String",
      "description": "reCAPTCHA secret key.",
      "sourceType": "com.viettel.backend.config.security.captcha.RecaptchaProperties$Validation"
    },
    {
      "name": "recaptcha.validation.site-key",
      "type": "java.lang.String",
      "description": "Site key for Google reCAPTCHA service"
    },
    {
      "name": "spring.redis.database",
      "type": "java.lang.Integer",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "spring.redis.embedded.config-file",
      "type": "java.lang.String",
      "description": "Specify config file for embedded Redis, IF this value is SET, OTHER embedded OPTIONS WILL BE SKIP. Note: DO NOT configure 'logfile', other wise our application cannot start",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties$Embedded"
    },
    {
      "name": "spring.redis.embedded.enable",
      "type": "java.lang.Boolean",
      "description": "Start embedded Redis server or not",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties$Embedded",
      "defaultValue": "false"
    },
    {
      "name": "spring.redis.embedded.max-memory",
      "type": "java.lang.String",
      "description": "Max memory for embedded Redis",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties$Embedded",
      "defaultValue": "1gb"
    },
    {
      "name": "spring.redis.embedded.working-dir",
      "type": "java.lang.String",
      "description": "Location to store data file for embedded Redis. When using this option, make sure following directory already created and app have permission",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties$Embedded"
    },
    {
      "name": "spring.redis.host",
      "type": "java.lang.String",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "spring.redis.password",
      "type": "java.lang.String",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "spring.redis.pool",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Pool",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "spring.redis.port",
      "type": "java.lang.Integer",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "spring.redis.sentinel",
      "type": "org.springframework.boot.autoconfigure.data.redis.RedisProperties$Sentinel",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "spring.redis.timeout",
      "type": "java.lang.Integer",
      "sourceType": "com.viettel.backend.config.root.RedisEmbeddedProperties"
    },
    {
      "name": "stomp.embedded",
      "type": "java.lang.Boolean",
      "description": "Is using embedded-inmemory STOMP broker. If false, an external broker with specified host and port will be used",
      "sourceType": "com.viettel.backend.config.web.StompProperties",
      "defaultValue": true
    },
    {
      "name": "stomp.host",
      "type": "java.lang.String",
      "description": "STOMP broker host name or IP address",
      "sourceType": "com.viettel.backend.config.web.StompProperties"
    },
    {
      "name": "stomp.port",
      "type": "java.lang.Integer",
      "description": "STOMP broker port to connect to",
      "sourceType": "com.viettel.backend.config.web.StompProperties",
      "defaultValue": 0
    },
    {
      "name": "totp.enable",
      "type": "java.lang.Boolean",
      "description": "Value indicating that TOTP shoud be enable or not",
      "sourceType": "com.viettel.backend.config.security.TotpProperties",
      "defaultValue": false
    },
    {
      "name": "totp.secret",
      "type": "java.lang.String",
      "description": "A base32 value of secret using for generate TOTP token",
      "sourceType": "com.viettel.backend.config.security.TotpProperties"
    }
  ],
  "hints": []
}